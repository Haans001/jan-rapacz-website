{"version":3,"sources":["webpack:///./src/templates/ProjectTemplate.js","webpack:///./src/utils/ParallaxCache.js","webpack:///./src/pages/work.js"],"names":["StyledImage","styled","Image","StyledLine","div","counter","StyledProjectInfo","theme","zIndex","level2","media","tablet","StyledImageWrapper","colors","black","StyledWrapper","StyledProjectParagraph","StyledParagraph","blue","StyledLink","Link","lightGrey","fontSize","xm","ProjectTemplate","image","title","paragraph","scrollContainer","infoRef","useRef","imageRef","triggerRef","useState","timeline","setTimeline","useEffect","tl","getProjectTemplateTimeline","current","ScrollTrigger","triggerOffset","window","innerHeight","ref","y","to","fluid","ParallaxCache","parallaxController","useController","timerId","useLayoutEffect","setTimeout","update","clearTimeout","StyledSectionGrid","StyledTitleTextWrapper","StyledFooter","darkGrey","projectsData","a","white","WorkPage","state","componentDidMount","this","setState","document","getElementById","render","props","uri","data","titleImage","childImageSharp","projectImages","allFile","MainTemplate","map","index","key","href","Component","query"],"mappings":"+4BAWA,IAAMA,EAAcC,YAAOC,KAAV,kFAAGD,CAAH,sBAIXE,EAAaF,IAAOG,IAAV,iFAAGH,CAAH,oOAIN,qBAAGI,QAAyB,GAAM,EAAhB,gBAiBtBC,EAAoBL,IAAOG,IAAV,wFAAGH,CAAH,4EAGV,qBAAGM,MAAkBC,OAAOC,SAGrCC,IAAMC,OANa,IAUfR,IAMFS,EAAqBX,IAAOG,IAAV,yFAAGH,CAAH,+UAGpBD,GAagB,qBAAGO,MAAkBM,OAAOC,QAK1Cd,EASFU,IAAMC,OA9Bc,MAkClBI,EAAgBd,IAAOG,IAAV,oFAAGH,CAAH,8PAKH,qBAAGM,MAAkBM,OAAOC,QAMtCR,EAIEI,IAAMC,OAfK,KAmBbC,EAMFF,IAAMC,OAzBS,IAgCbL,EAGAM,IASAI,EAAyBf,YAAOgB,KAAV,6FAAGhB,CAAH,yIAWV,qBAAGM,MAAkBM,OAAOK,QAIxCC,EAAalB,YAAOmB,QAAV,iFAAGnB,CAAH,2DACL,qBAAGM,MAAkBM,OAAOQ,aACxB,qBAAGd,MAAkBe,SAASC,MAK9B,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,UACAtB,EAEC,EAFDA,QACAuB,EACC,EADDA,gBAEMC,EAAUC,iBAAO,MACjBC,EAAWD,iBAAO,MAClBE,EAAaF,iBAAO,MAHzB,EAI+BG,mBAAS,MAAlCC,EAJN,KAIgBC,EAJhB,KAWD,OALAC,qBAAU,WACR,IAAMC,EAAKC,YAA2BT,EAAQU,QAASR,EAASQ,SAChEJ,EAAYE,KACX,IAGD,kBAACG,EAAA,EAAD,CACEZ,gBAAiBA,EACjBM,SAAUA,GAAYA,EACtBO,cAAeC,OAAOC,YAAc,GAEpC,kBAAC5B,EAAD,CAAe6B,IAAKZ,GAClB,kBAAC1B,EAAD,KACE,kBAACH,EAAD,CAAYE,QAASA,IACrB,kBAAC,WAAD,CAAUwC,EAAG,CAAC,KAAM,MAClB,yBAAKD,IAAKf,GACR,kBAAC,IAAD,KAAeH,GACf,kBAACV,EAAD,KAAyBW,GACzB,kBAACR,EAAD,CAAY2B,GAAG,KAAf,mBAIN,kBAAC,WAAD,CAAUD,EAAG,CAAC,IAAK,KACjB,kBAACjC,EAAD,CAAoBgC,IAAKb,GACvB,kBAAC/B,EAAD,CAAa+C,MAAOtB,QCzLhC,IAUeuB,EAVO,WAAO,IACnBC,EAAuBC,0BAAvBD,mBACFE,EAAUrB,iBAAO,GAMvB,OALAsB,2BAAgB,WAEd,OADAC,YAAW,kBAAMJ,EAAmBK,WAAU,KACvC,kBAAMC,aAAaJ,MACzB,CAACF,IAEG,M,2RCCT,IAAMrC,EAAqBX,IAAOG,IAAV,+EAAGH,CAAH,MAElBuD,EAAoBvD,IAAOG,IAAV,8EAAGH,CAAH,wFAOnBS,IAAMC,OAPa,IAWjBC,IAKA6C,EAAyBxD,IAAOG,IAAV,mFAAGH,CAAH,uBAGtByD,EAAezD,IAAOG,IAAV,yEAAGH,CAAH,mDAEF,qBAAGM,MAAkBM,OAAO8C,YAItCC,EAAe,CACnB,CACElC,MAAO,WACPC,UACE,wEAEJ,CACED,MAAO,YACPC,UACE,6KAEJ,CACED,MAAO,qBACPC,UACE,8GAIAR,EAAalB,IAAO4D,EAAV,uEAAG5D,CAAH,qDACL,qBAAGM,MAAkBM,OAAOiD,SAG1B,qBAAGvD,MAAkBM,OAAOK,QAIpB6C,E,oBACnB,aAAe,IAAD,SACZ,sBACKC,MAAQ,CACXpC,gBAAiB,MAHP,E,kHAOdqC,kBAAA,WACEC,KAAKC,SAAS,CACZvC,gBAAiBwC,SAASC,eAAe,sB,EAI7CC,OAAA,WAAU,IAAD,EACeJ,KAAKK,MAAnBC,EADD,EACCA,IAAKC,EADN,EACMA,KAGUC,EAEnBD,EAHFC,WACEC,gBAAmBD,WAIVE,EACTH,EADFI,QAAWD,cAGLhD,EAAoBsC,KAAKF,MAAzBpC,gBAER,OACE,kBAACkD,EAAA,EAAD,CAAcN,IAAKA,GACjB,kBAAC,mBAAD,CAAkB5C,gBAAiBA,GACjC,kBAAC,EAAD,MACA,kBAAC4B,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,IAAD,aACA,kBAAC,IAAD,iCAEF,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAKV,MAAO2B,MAGfd,EAAamB,KAAI,WAAuBC,GAAvB,IAAGtD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OAChB,kBAACH,EAAD,CACEI,gBAAiBA,EACjBqD,IAAKvD,EACLA,MAAOA,EACPrB,QAAS2E,EACTrD,UAAWA,EACXF,MAAOmD,EAAcI,GAAOL,gBAAgB5B,WAGhD,kBAACW,EAAD,KACE,kBAAC,IAAD,oCAC+B,IAC7B,kBAAC,EAAD,CAAYwB,KAAK,gDAAjB,UAFF,S,GAnD0BC,aAiEzBC,EAAK","file":"component---src-pages-work-js-21554446568cb7f80167.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { Parallax } from 'react-scroll-parallax';\r\nimport { StyledHeader, StyledParagraph } from 'utils/typography';\r\nimport ScrollTrigger from 'components/ScrollTrigger/ScrollTrigger';\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Image from 'gatsby-image';\r\nimport { getProjectTemplateTimeline } from 'utils/timelines';\r\nimport media from 'utils/media';\r\n\r\nconst StyledImage = styled(Image)`\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledLine = styled.div`\r\n  position: absolute;\r\n  width: 2px;\r\n  height: calc(100vw / 3);\r\n  left: ${({ counter }) => (counter % 2 === 0 ? `75%` : `-15%`)};\r\n  top: -20%;\r\n  background: #090909;\r\n  z-index: -1;\r\n\r\n  &::before {\r\n    position: absolute;\r\n    content: '';\r\n    width: 11px;\r\n    border-radius: 1000px;\r\n    height: 10px;\r\n    left: -5px;\r\n    top: -10px;\r\n    background: #090909;\r\n  }\r\n`;\r\n\r\nconst StyledProjectInfo = styled.div`\r\n  width: 130%;\r\n  transform: translateX(15%);\r\n  z-index: ${({ theme }) => theme.zIndex.level2};\r\n  position: relative;\r\n\r\n  ${media.tablet`\r\n    transform:none;\r\n    width:100%;\r\n\r\n      ${StyledLine}{\r\n        display:none;\r\n      }\r\n  `}\r\n`;\r\n\r\nconst StyledImageWrapper = styled.div`\r\n  overflow: hidden;\r\n\r\n  ${StyledImage} {\r\n    transition: transform 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);\r\n    cursor: pointer;\r\n    position: relative;\r\n\r\n    &::after {\r\n      position: absolute;\r\n      opacity: 0.3;\r\n      content: '';\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background: ${({ theme }) => theme.colors.black};\r\n      transition: opacity 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);\r\n    }\r\n  }\r\n  &:hover {\r\n    ${StyledImage} {\r\n      transform: scale(1.1);\r\n\r\n      &::after {\r\n        opacity: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  ${media.tablet`\r\n    transform: translate(10%, -20%);\r\n  `}\r\n`;\r\nconst StyledWrapper = styled.div`\r\n  width: 100%;\r\n  padding: 17% 12%;\r\n  display: grid;\r\n  grid-template-columns: 30% auto;\r\n  background: ${({ theme }) => theme.colors.black};\r\n  position: relative;\r\n\r\n  &:nth-of-type(even) {\r\n    grid-template-columns: auto 30%;\r\n\r\n    ${StyledProjectInfo} {\r\n      grid-column: 2;\r\n      transform: translateX(-10%);\r\n\r\n      ${media.tablet`\r\n        transform: none;\r\n      `}\r\n    }\r\n    ${StyledImageWrapper} {\r\n      grid-column: 1;\r\n    }\r\n    grid-auto-flow: dense;\r\n  }\r\n\r\n  ${media.tablet`\r\n    grid-template-columns:initial;\r\n    padding: 12%;\r\n\r\n    &:nth-of-type(even) {\r\n    grid-template-columns:initial;\r\n\r\n    ${StyledProjectInfo} {\r\n      grid-column: 1;\r\n    }\r\n    ${StyledImageWrapper} {\r\n      grid-column: 2;\r\n    }   \r\n  }\r\n\r\n\r\n  `}\r\n`;\r\n\r\nconst StyledProjectParagraph = styled(StyledParagraph)`\r\n  max-width: initial;\r\n  position: relative;\r\n\r\n  &::after {\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 5px;\r\n    top: 5px;\r\n    left: -60px;\r\n    content: '';\r\n    background: ${({ theme }) => theme.colors.blue};\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  color: ${({ theme }) => theme.colors.lightGrey};\r\n  font-size: ${({ theme }) => theme.fontSize.xm};\r\n  display: block;\r\n  padding: 2rem 0;\r\n`;\r\n\r\nexport default function ProjectTemplate({\r\n  image,\r\n  title,\r\n  paragraph,\r\n  counter,\r\n  scrollContainer,\r\n}) {\r\n  const infoRef = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const triggerRef = useRef(null);\r\n  const [timeline, setTimeline] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const tl = getProjectTemplateTimeline(infoRef.current, imageRef.current);\r\n    setTimeline(tl);\r\n  }, []);\r\n\r\n  return (\r\n    <ScrollTrigger\r\n      scrollContainer={scrollContainer}\r\n      timeline={timeline && timeline}\r\n      triggerOffset={window.innerHeight / 3}\r\n    >\r\n      <StyledWrapper ref={triggerRef}>\r\n        <StyledProjectInfo>\r\n          <StyledLine counter={counter} />\r\n          <Parallax y={[100, -100]}>\r\n            <div ref={infoRef}>\r\n              <StyledHeader>{title}</StyledHeader>\r\n              <StyledProjectParagraph>{paragraph}</StyledProjectParagraph>\r\n              <StyledLink to=\"/\">read more >></StyledLink>\r\n            </div>\r\n          </Parallax>\r\n        </StyledProjectInfo>\r\n        <Parallax y={[20, -20]}>\r\n          <StyledImageWrapper ref={imageRef}>\r\n            <StyledImage fluid={image} />\r\n          </StyledImageWrapper>\r\n        </Parallax>\r\n      </StyledWrapper>\r\n    </ScrollTrigger>\r\n  );\r\n}\r\n\r\nProjectTemplate.propTypes = {\r\n  image: PropTypes.shape().isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  paragraph: PropTypes.string.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  scrollContainer: PropTypes.element.isRequired,\r\n};\r\n","import { useLayoutEffect, useRef } from 'react';\r\nimport { useController } from 'react-scroll-parallax';\r\n\r\nconst ParallaxCache = () => {\r\n  const { parallaxController } = useController();\r\n  const timerId = useRef(0);\r\n  useLayoutEffect(() => {\r\n    setTimeout(() => parallaxController.update(), 100);\r\n    return () => clearTimeout(timerId);\r\n  }, [parallaxController]);\r\n\r\n  return null;\r\n};\r\nexport default ParallaxCache;\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport Img from 'gatsby-image';\r\nimport styled from 'styled-components';\r\nimport MainTemplate from 'templates/MainTemplate';\r\nimport ProjectTemplate from 'templates/ProjectTemplate';\r\nimport StyledSectionTitle, { StyledHeader } from 'utils/typography';\r\nimport media from 'utils/media';\r\nimport ParallaxCache from 'utils/ParallaxCache';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\n\r\nconst StyledImageWrapper = styled.div``;\r\n\r\nconst StyledSectionGrid = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  grid-gap: 10%;\r\n  grid-template-columns: 50% auto;\r\n  padding: 12%;\r\n\r\n  ${media.tablet`\r\n    grid-template-columns: initial;\r\n    grid-gap:0;\r\n\r\n    ${StyledImageWrapper}{\r\n      display:none;\r\n    }\r\n  `}\r\n`;\r\nconst StyledTitleTextWrapper = styled.div`\r\n  margin-top: 10rem;\r\n`;\r\nconst StyledFooter = styled.div`\r\n  padding: 12%;\r\n  background: ${({ theme }) => theme.colors.darkGrey};\r\n  text-align: center;\r\n`;\r\n\r\nconst projectsData = [\r\n  {\r\n    title: 'Tasteful',\r\n    paragraph:\r\n      'Page design and branding for one of the most popular cafe in Cracow.',\r\n  },\r\n  {\r\n    title: 'Bornfight',\r\n    paragraph:\r\n      'Modern web design made for local sport team brand.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean vel nisi porttitor, ultricies risus a, consequat velit.',\r\n  },\r\n  {\r\n    title: 'The art of guitars',\r\n    paragraph:\r\n      'I help my good friend who opened music store, by making a ad website with modern and minimalistic desing.',\r\n  },\r\n];\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  font-size: inherit;\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.blue};\r\n  }\r\n`;\r\n\r\nexport default class WorkPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      scrollContainer: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      scrollContainer: document.getElementById('scrollContainer'),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { uri, data } = this.props;\r\n    const {\r\n      titleImage: {\r\n        childImageSharp: { titleImage },\r\n      },\r\n    } = data;\r\n    const {\r\n      allFile: { projectImages },\r\n    } = data;\r\n\r\n    const { scrollContainer } = this.state;\r\n\r\n    return (\r\n      <MainTemplate uri={uri}>\r\n        <ParallaxProvider scrollContainer={scrollContainer}>\r\n          <ParallaxCache />\r\n          <StyledSectionGrid>\r\n            <StyledTitleTextWrapper>\r\n              <StyledSectionTitle>Work</StyledSectionTitle>\r\n              <StyledHeader>All of my best projects</StyledHeader>\r\n            </StyledTitleTextWrapper>\r\n            <StyledImageWrapper>\r\n              <Img fluid={titleImage} />\r\n            </StyledImageWrapper>\r\n          </StyledSectionGrid>\r\n          {projectsData.map(({ title, paragraph }, index) => (\r\n            <ProjectTemplate\r\n              scrollContainer={scrollContainer}\r\n              key={title}\r\n              title={title}\r\n              counter={index}\r\n              paragraph={paragraph}\r\n              image={projectImages[index].childImageSharp.fluid}\r\n            />\r\n          ))}\r\n          <StyledFooter>\r\n            <StyledHeader>\r\n              See all of my projects on my{' '}\r\n              <StyledLink href=\"https://github.com/Haans001?tab=repositories\">\r\n                github\r\n              </StyledLink>\r\n              .\r\n            </StyledHeader>\r\n          </StyledFooter>\r\n        </ParallaxProvider>\r\n      </MainTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    titleImage: file(relativePath: { eq: \"work.jpg\" }) {\r\n      childImageSharp {\r\n        titleImage: fluid(maxWidth: 1500) {\r\n          ...GatsbyImageSharpFluid_noBase64\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { relativeDirectory: { eq: \"projects\" } }) {\r\n      projectImages: nodes {\r\n        childImageSharp {\r\n          fluid(maxWidth: 1500) {\r\n            ...GatsbyImageSharpFluid_noBase64\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nWorkPage.propTypes = {\r\n  uri: PropTypes.string.isRequired,\r\n  data: PropTypes.shape({\r\n    titleImage: PropTypes.shape(),\r\n    allFile: PropTypes.shape({\r\n      projectImages: PropTypes.arrayOf(PropTypes.shape()),\r\n    }),\r\n  }).isRequired,\r\n};\r\n"],"sourceRoot":""}